#### 
# See details at https://hub.docker.com/r/debezium/postgres

# LOGGING
log_min_error_statement = fatal

# CONNECTION
listen_addresses = '*'

# MODULES
# shared_preload_libraries = 'decoderbufs'

# REPLICATION
wal_level = logical             # minimal, archive, hot_standby, or logical (change requires restart)
max_wal_senders = 3             # max number of walsender processes (change requires restart)
#wal_keep_segments = 4          # in logfile segments, 16MB each; 0 disables
#wal_sender_timeout = 60s       # in milliseconds; 0 disables
max_replication_slots = 3       # max number of replication slots (change requires restart)


# В PostgreSQL 9.6 и более поздних версиях, значение по умолчанию для wal_keep_segments равно 0. 
# Это означает, что PostgreSQL не будет сохранять дополнительные сегменты WAL специально для репликации.
# DEPRECATED in v.15
# wal_keep_segments = 100

#  If wal_keep_size is zero (the default), the system doesn't keep any extra segments for standby purposes,
# so the number of old WAL segments available to standby servers is a function of the location of 
# the previous checkpoint and status of WAL archiving. 
# If this value is specified without units, it is taken as megabytes. 
wal_keep_size =128

# Включение архивирования WAL-логов
archive_mode = on

# Команда для копирования WAL-логов в архивный каталог (только для проверки эластичности pgoutput при работе с архивными копиями)
archive_command = 'cp %p /var/lib/postgresql/data/%f'

# Включение логического декодирования
# wal_level = logical

# Включение плагина pgoutput для логического декодирования
shared_preload_libraries = 'pgoutput'

# Настройка вывода изменений для плагина pgoutput
pgoutput.logical = on

# Дополнительные параметры настройки плагина pgoutput (если необходимо)
# pgoutput.proto_version = 1
# pgoutput.publication_names = 'my_pgoutput_publication'